<style>
.section .reveal .state-background {
    background: #25679E;
}

.small-code pre code {
  font-size: 1em;
}

.reveal .state-background {
  background: #25679E;
} 

.exclaim .reveal .state-background {
  background: #e6f5ff;
} 


.exclaim .reveal h1,
.exclaim .reveal h2,
.exclaim .reveal h3 
{
  color: #25679E;
}

</style>

2016 Six Nations Rugby Championship Predictive Shiny Application
========================================================
author: SÃ©bastien Durand
date: 22/02/2016
font-family: 'Risque'

Problem definition
========================================================
type: exclaim
<small>
I am a Rugby fan and enjoy applying analytics to various sports.  

The [2016 six nations rugby championship](https://en.wikipedia.org/wiki/2016_Six_Nations_Championship) has recently started and I wanted to create a predictive application to give some basic insights on match results based on the 2015 championship results.

__The problem to solve:__  
Can we predict the match outcomes of the 2016 Championship using a combination of the results of the past 2015 championship and the on-going 2016 championship results?
</small>


Training Data and Predictive Model
========================================================
type: exclaim
class: small-code
<small>
For my shiny application, I made the 'naive' assumption that the Rugby scores were Poisson distributed and applied a simple Generalized Linear Model with Poisson-log link function similarly to the one used by  Martin Eastwood(see [Predicting Football Using R](http://pena.lt/y/2014/11/02/predicting-football-using-r/)).
</small>

```{r, echo=FALSE}
rugby_results_2015_txt = 'HomeTeam,AwayTeam,HomeScore,AwayScore
Wales,Italy,23,15
France,England,26,24
Ireland,Scotland,28,6
Ireland,Wales,26,3
Scotland,England,0,20
France,Italy,30,10
Wales,France,27,6
Italy,Scotland,20,21
England,Ireland,13,10
Ireland,Italy,46,7
Scotland,France,17,19
England,Wales,29,18
Italy,England,11,52
Wales,Scotland,51,3
France,Ireland,20,22'

rugby_results_2015_df <- read.csv(text = rugby_results_2015_txt)

rugby_results_2015_df$HomeScore <- as.numeric(rugby_results_2015_df$HomeScore)
rugby_results_2015_df$AwayScore <- as.numeric(rugby_results_2015_df$AwayScore)

rugby_results_2015_df$HomeResult <- as.factor(with(rugby_results_2015_df, {ifelse( HomeScore > AwayScore, "W", ifelse( HomeScore == AwayScore,"D","L"))}))
rugby_results_2015_df$AwayResult <- as.factor(with(rugby_results_2015_df, {ifelse( HomeScore > AwayScore, "L", ifelse( HomeScore == AwayScore,"D","W"))}))


training <- data.frame(Team=as.factor(c(as.character(rugby_results_2015_df$HomeTeam),
                                              as.character(rugby_results_2015_df$AwayTeam))),
                             Opponent=as.factor(c(as.character(rugby_results_2015_df$AwayTeam),
                                                  as.character(rugby_results_2015_df$HomeTeam))),
                             Score=c(rugby_results_2015_df$HomeScore, rugby_results_2015_df$AwayScore),
                             Home=c(as.integer(rep(1, dim(rugby_results_2015_df)[1])), as.integer(rep(0, dim(rugby_results_2015_df)[1]))),
                             Result=factor(c(rugby_results_2015_df$HomeResult,rugby_results_2015_df$AwayResult), labels=c("L","W")))

```

<small>The training dataset contains the following column variables:</small>
``` {r, echo=TRUE}
head(training,3)
```

<small>And the prediction model is trained as follows:</small>
``` {r, echo=TRUE}
model <- glm(Score ~ Home + Team + Opponent, data=training, family=poisson(link="log"))
```


Example of a Fixture Prediction: 
========================================================
type: exclaim
class: small-code
<small>The code below illustrates how a fixture prediction is performed using the fitted glm model (e.g. 'England - Ireland' ):</small>
``` {r, echo=TRUE}
## Home scoring rate prediction
lambda <- predict(model, data.frame(Home=1, Team="England", Opponent="Ireland"), type="response")

## Away Team scoring rate prediction
mu <- predict(model, data.frame(Home=0, Team="Ireland", Opponent="England"), type="response")

## Joint-Distribution table of Home scores Vs Away scores  - could also have used mean(rpois(1000,lambda)>rpois(1000,mu)) instead.
maxScore <- 65
prob_matrix <- dpois(0:maxScore, lambda) %*% t(dpois(0:maxScore, mu))

## W/D/L Probability calculation
WinPr <- sum(prob_matrix[lower.tri(prob_matrix)])
DrawPr <- sum(diag(prob_matrix))
LosePr <- sum(prob_matrix[upper.tri(prob_matrix)])

cat(sprintf("Lamdba=%.2f, Mu=%.2f\nEngland to Win=%.2f, to Draw=%.2f, to Lose=%.2f against Ireland",lambda,mu,WinPr,DrawPr,LosePr))
```



Results and Conclusions
========================================================
type: exclaim
<small>
<small>We are now two weeks into the 2016 championship, the [2016 Six Nations Rugby Predictive Shiny Application](https://sebastid.shinyapps.io/2016SixNationsRugbyPredApp/) correctly predicted 4 match outcomes out of 6 played matches. My initial conclusions are:  
- The estimated probabilities and decimal odd values seem too extreme and should not be trusted entirely (i.e. for value betting). 
- On the other hand, the application predictions look good enough to provide some insights for the remaining matches to play and to provide a quick way to compare the relative strengths of the playing Rugby teams (.i.e. Offensive/Defensive strength chart).</small>  

__To try next:__
- <small>Decompose the score variable into tries and penalty covariates (likely to be more like Poisson random variables : E(X) ~ Var(X)).</small>
- <small>To use more data and cross-validation to minimize overfitting.</small>
- <small>Try alternative model algorithms (e.g. hierarchical MCMC Bayesian Regression models to use priors).</small>
</small>



